{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 143, "column": 0}, "map": {"version":3,"sources":["file:///Users/muhammadghally/Documents/eventhub-beta/eventhub-beta/src/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client';\n\nconst globalForPrisma = globalThis as unknown as {\n  prisma: PrismaClient | undefined;\n};\n\nexport const prisma =\n  globalForPrisma.prisma ??\n  new PrismaClient({\n    log: process.env.NODE_ENV === 'development' ? ['query'] : ['error'],\n  });\n\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma;\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,kBAAkB;AAIjB,MAAM,SACX,gBAAgB,MAAM,IACtB,IAAI,6HAAA,CAAA,eAAY,CAAC;IACf,KAAK,uCAAyC;QAAC;KAAQ;AACzD;AAEF,wCAA2C,gBAAgB,MAAM,GAAG"}},
    {"offset": {"line": 155, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 161, "column": 0}, "map": {"version":3,"sources":["file:///Users/muhammadghally/Documents/eventhub-beta/eventhub-beta/src/lib/auth.ts"],"sourcesContent":["import { NextAuthOptions } from \"next-auth\";\nimport CredentialsProvider from \"next-auth/providers/credentials\";\nimport { PrismaAdapter } from \"@next-auth/prisma-adapter\";\nimport { prisma } from \"./prisma\";\nimport bcrypt from \"bcryptjs\";\n\nexport const authOptions: NextAuthOptions = {\n  adapter: PrismaAdapter(prisma),\n  providers: [\n    CredentialsProvider({\n      name: \"credentials\",\n      credentials: {\n        email: { label: \"Email\", type: \"email\" },\n        password: { label: \"Password\", type: \"password\" },\n      },\n      async authorize(credentials) {\n        if (!credentials?.email || !credentials?.password) {\n          return null;\n        }\n\n        const user = await prisma.user.findUnique({\n          where: {\n            email: credentials.email,\n          },\n        });\n\n        if (!user) {\n          return null;\n        }\n\n        const isPasswordValid = await bcrypt.compare(\n          credentials.password,\n          user.password\n        );\n\n        if (!isPasswordValid) {\n          return null;\n        }\n\n        return {\n          id: user.id,\n          email: user.email,\n          name: user.name,\n          role: user.role,\n          profilePicture: user.profilePicture,\n        };\n      },\n    }),\n  ],\n  session: {\n    strategy: \"jwt\",\n  },\n  callbacks: {\n    async jwt({ token, user }) {\n      if (user) {\n        token.role = user.role;\n        token.profilePicture = user.profilePicture;\n      }\n      return token;\n    },\n    async session({ session, token }) {\n      if (token) {\n        session.user.id = token.sub!;\n        session.user.role = token.role as string;\n        session.user.profilePicture = token.profilePicture as string;\n      }\n      return session;\n    },\n  },\n  pages: {\n    signIn: \"/auth/signin\",\n    signUp: \"/auth/signup\",\n  },\n};\n"],"names":[],"mappings":";;;AACA;AACA;AACA;AACA;;;;;AAEO,MAAM,cAA+B;IAC1C,SAAS,CAAA,GAAA,mXAAA,CAAA,gBAAa,AAAD,EAAE,sHAAA,CAAA,SAAM;IAC7B,WAAW;QACT,CAAA,GAAA,+WAAA,CAAA,UAAmB,AAAD,EAAE;YAClB,MAAM;YACN,aAAa;gBACX,OAAO;oBAAE,OAAO;oBAAS,MAAM;gBAAQ;gBACvC,UAAU;oBAAE,OAAO;oBAAY,MAAM;gBAAW;YAClD;YACA,MAAM,WAAU,WAAW;gBACzB,IAAI,CAAC,aAAa,SAAS,CAAC,aAAa,UAAU;oBACjD,OAAO;gBACT;gBAEA,MAAM,OAAO,MAAM,sHAAA,CAAA,SAAM,CAAC,IAAI,CAAC,UAAU,CAAC;oBACxC,OAAO;wBACL,OAAO,YAAY,KAAK;oBAC1B;gBACF;gBAEA,IAAI,CAAC,MAAM;oBACT,OAAO;gBACT;gBAEA,MAAM,kBAAkB,MAAM,wLAAA,CAAA,UAAM,CAAC,OAAO,CAC1C,YAAY,QAAQ,EACpB,KAAK,QAAQ;gBAGf,IAAI,CAAC,iBAAiB;oBACpB,OAAO;gBACT;gBAEA,OAAO;oBACL,IAAI,KAAK,EAAE;oBACX,OAAO,KAAK,KAAK;oBACjB,MAAM,KAAK,IAAI;oBACf,MAAM,KAAK,IAAI;oBACf,gBAAgB,KAAK,cAAc;gBACrC;YACF;QACF;KACD;IACD,SAAS;QACP,UAAU;IACZ;IACA,WAAW;QACT,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAAE;YACvB,IAAI,MAAM;gBACR,MAAM,IAAI,GAAG,KAAK,IAAI;gBACtB,MAAM,cAAc,GAAG,KAAK,cAAc;YAC5C;YACA,OAAO;QACT;QACA,MAAM,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAE;YAC9B,IAAI,OAAO;gBACT,QAAQ,IAAI,CAAC,EAAE,GAAG,MAAM,GAAG;gBAC3B,QAAQ,IAAI,CAAC,IAAI,GAAG,MAAM,IAAI;gBAC9B,QAAQ,IAAI,CAAC,cAAc,GAAG,MAAM,cAAc;YACpD;YACA,OAAO;QACT;IACF;IACA,OAAO;QACL,QAAQ;QACR,QAAQ;IACV;AACF"}},
    {"offset": {"line": 238, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 244, "column": 0}, "map": {"version":3,"sources":["file:///Users/muhammadghally/Documents/eventhub-beta/eventhub-beta/src/services/eventService.ts"],"sourcesContent":["import { prisma } from '../lib/prisma';\nimport type { Event } from '../types';\nimport { EventStatus, Event as PrismaEvent } from '@prisma/client';\n\nexport class EventService {\n  static async getAllEvents(): Promise<Event[]> {\n    return await prisma.event.findMany({\n      include: {\n        organizer: {\n          select: {\n            id: true,\n            name: true,\n            email: true,\n            role: true,\n            createdAt: true,\n            updatedAt: true\n          }\n        },\n        ticketTypes: true,\n        _count: {\n          select: {\n            reviews: true\n          }\n        }\n      },\n      orderBy: {\n        date: 'asc'\n      }\n    });\n  }\n\n  static async getEventById(id: string): Promise<Event | null> {\n    return await prisma.event.findUnique({\n      where: { id },\n      include: {\n        organizer: {\n          select: {\n            id: true,\n            name: true,\n            email: true,\n            role: true,\n            createdAt: true,\n            updatedAt: true\n          }\n        },\n        ticketTypes: true,\n        reviews: {\n          include: {\n            user: {\n              select: {\n                name: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: 'desc'\n          }\n        }\n      }\n    });\n  }\n\n  static async getEventsByCategory(category: string): Promise<Event[]> {\n    return await prisma.event.findMany({\n      where: {\n        category: {\n          contains: category,\n          mode: 'insensitive'\n        }\n      },\n      include: {\n        organizer: {\n          select: {\n            id: true,\n            name: true,\n            email: true,\n            role: true,\n            createdAt: true,\n            updatedAt: true\n          }\n        },\n        ticketTypes: true\n      },\n      orderBy: {\n        date: 'asc'\n      }\n    });\n  }\n\n  static async searchEvents(query: string): Promise<Event[]> {\n    return await prisma.event.findMany({\n      where: {\n        OR: [\n          {\n            title: {\n              contains: query,\n              mode: 'insensitive'\n            }\n          },\n          {\n            description: {\n              contains: query,\n              mode: 'insensitive'\n            }\n          },\n          {\n            category: {\n              contains: query,\n              mode: 'insensitive'\n            }\n          },\n          {\n            location: {\n              contains: query,\n              mode: 'insensitive'\n            }\n          }\n        ]\n      },\n      include: {\n        organizer: {\n          select: {\n            id: true,\n            name: true,\n            email: true,\n            role: true,\n            createdAt: true,\n            updatedAt: true\n          }\n        },\n        ticketTypes: true\n      },\n      orderBy: {\n        date: 'asc'\n      }\n    });\n  }\n\n  static async createEvent(organizerId: string, eventData: any): Promise<Event> {\n    return await prisma.event.create({\n      data: {\n        ...eventData,\n        organizerId\n      },\n      include: {\n        organizer: {\n          select: {\n            id: true,\n            name: true,\n            email: true,\n            role: true,\n            createdAt: true,\n            updatedAt: true\n          }\n        },\n        ticketTypes: true\n      }\n    });\n  }\n\n  static async updateEvent(id: string, eventData: Partial<Event>): Promise<Event | null> {\n    return await prisma.event.update({\n      where: { id },\n      data: eventData,\n      include: {\n        organizer: {\n          select: {\n            id: true,\n            name: true,\n            email: true,\n            role: true,\n            createdAt: true,\n            updatedAt: true\n          }\n        },\n        ticketTypes: true\n      }\n    });\n  }\n\n  static async deleteEvent(id: string): Promise<void> {\n    await prisma.event.delete({\n      where: { id }\n    });\n  }\n\n  static async getEventsByOrganizer(\n    organizerId: string, \n    filters: { search?: string; category?: string; page?: number; limit?: number }\n  ) {\n    const { search, category, page = 1, limit = 10 } = filters;\n    \n    const where: any = { organizerId };\n    \n    if (search) {\n      where.OR = [\n        { title: { contains: search, mode: 'insensitive' } },\n        { description: { contains: search, mode: 'insensitive' } },\n        { location: { contains: search, mode: 'insensitive' } }\n      ];\n    }\n    \n    if (category) {\n      where.category = { contains: category, mode: 'insensitive' };\n    }\n\n    const [events, total] = await Promise.all([\n      prisma.event.findMany({\n        where,\n        include: {\n          organizer: {\n            select: {\n              id: true,\n              name: true,\n              email: true,\n              role: true,\n              createdAt: true,\n              updatedAt: true\n            }\n          },\n          ticketTypes: true,\n          _count: {\n            select: {\n              transactions: true,\n              reviews: true\n            }\n          }\n        },\n        orderBy: { createdAt: 'desc' },\n        skip: (page - 1) * limit,\n        take: limit\n      }),\n      prisma.event.count({ where })\n    ]);\n\n    return {\n      events,\n      pagination: {\n        page,\n        limit,\n        total,\n        pages: Math.ceil(total / limit)\n      }\n    };\n  }\n\n  static async getPublicEvents(filters: { search?: string; category?: string; page?: number; limit?: number }) {\n    const { search, category, page = 1, limit = 10 } = filters;\n    \n    const where: any = {};\n    \n    if (search) {\n      where.OR = [\n        { title: { contains: search, mode: 'insensitive' } },\n        { description: { contains: search, mode: 'insensitive' } },\n        { location: { contains: search, mode: 'insensitive' } }\n      ];\n    }\n    \n    if (category) {\n      where.category = { contains: category, mode: 'insensitive' };\n    }\n\n    const [events, total] = await Promise.all([\n      prisma.event.findMany({\n        where,\n        include: {\n          organizer: {\n            select: {\n              id: true,\n              name: true,\n              email: true,\n              role: true,\n              createdAt: true,\n              updatedAt: true\n            }\n          },\n          ticketTypes: true,\n          _count: {\n            select: {\n              reviews: true\n            }\n          }\n        },\n        orderBy: { date: 'asc' },\n        skip: (page - 1) * limit,\n        take: limit\n      }),\n      prisma.event.count({ where })\n    ]);\n\n    return {\n      events,\n      pagination: {\n        page,\n        limit,\n        total,\n        pages: Math.ceil(total / limit)\n      }\n    };\n  }\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 578, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 584, "column": 0}, "map": {"version":3,"sources":["file:///Users/muhammadghally/Documents/eventhub-beta/eventhub-beta/src/controllers/eventController.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { getServerSession } from 'next-auth';\nimport { authOptions } from '@/src/lib/auth';\nimport { EventService } from '../services/eventService';\nimport { UserRole } from '@prisma/client';\n\nexport class EventController {\n  static async getAllEvents(request: NextRequest): Promise<NextResponse> {\n    try {\n      const { searchParams } = new URL(request.url);\n      const organizerId = searchParams.get('organizerId');\n      const search = searchParams.get('search');\n      const category = searchParams.get('category');\n      const page = parseInt(searchParams.get('page') || '1');\n      const limit = parseInt(searchParams.get('limit') || '10');\n\n      // If requesting organizer's events, check permissions\n      if (organizerId) {\n        const session = await getServerSession(authOptions);\n        if (!session?.user) {\n          return NextResponse.json({ success: false, error: 'Unauthorized' }, { status: 401 });\n        }\n\n        if (session.user.role !== UserRole.ORGANIZER || session.user.id !== organizerId) {\n          return NextResponse.json({ success: false, error: 'Forbidden' }, { status: 403 });\n        }\n        \n        const events = await EventService.getEventsByOrganizer(organizerId, {\n          search,\n          category,\n          page,\n          limit\n        });\n        \n        return NextResponse.json({\n          success: true,\n          data: events\n        });\n      }\n\n      // Get public events for regular users\n      const events = await EventService.getPublicEvents({\n        search,\n        category,\n        page,\n        limit\n      });\n\n      return NextResponse.json({\n        success: true,\n        data: events\n      });\n    } catch (error) {\n      console.error('Error fetching events:', error);\n      return NextResponse.json(\n        {\n          success: false,\n          error: 'Failed to fetch events'\n        },\n        { status: 500 }\n      );\n    }\n  }\n\n  static async getEventById(\n    request: NextRequest,\n    { params }: { params: Promise<{ id: string }> }\n  ): Promise<NextResponse> {\n    try {\n      const { id } = await params;\n      const event = await EventService.getEventById(id);\n\n      if (!event) {\n        return NextResponse.json(\n          {\n            success: false,\n            error: 'Event not found'\n          },\n          { status: 404 }\n        );\n      }\n\n      return NextResponse.json({\n        success: true,\n        data: event\n      });\n    } catch (error) {\n      console.error('Error fetching event:', error);\n      return NextResponse.json(\n        {\n          success: false,\n          error: 'Failed to fetch event'\n        },\n        { status: 500 }\n      );\n    }\n  }\n\n  static async createEvent(request: NextRequest): Promise<NextResponse> {\n    try {\n      const session = await getServerSession(authOptions);\n      if (!session?.user || session.user.role !== UserRole.ORGANIZER) {\n        return NextResponse.json(\n          { success: false, error: 'Unauthorized' }, \n          { status: 401 }\n        );\n      }\n\n      const data = await request.json();\n      const event = await EventService.createEvent(session.user.id, data);\n\n      return NextResponse.json(\n        {\n          success: true,\n          data: event\n        },\n        { status: 201 }\n      );\n    } catch (error) {\n      console.error('Error creating event:', error);\n      return NextResponse.json(\n        {\n          success: false,\n          error: 'Failed to create event'\n        },\n        { status: 500 }\n      );\n    }\n  }\n\n  static async updateEvent(\n    request: NextRequest,\n    { params }: { params: Promise<{ id: string }> }\n  ): Promise<NextResponse> {\n    try {\n      const session = await getServerSession(authOptions);\n      if (!session?.user || session.user.role !== UserRole.ORGANIZER) {\n        return NextResponse.json(\n          { success: false, error: 'Unauthorized' }, \n          { status: 401 }\n        );\n      }\n\n      const data = await request.json();\n      const { id } = await params;\n\n      // Verify the event belongs to the organizer\n      const existingEvent = await EventService.getEventById(id);\n      if (!existingEvent || existingEvent.organizerId !== session.user.id) {\n        return NextResponse.json(\n          { success: false, error: 'Event not found or access denied' },\n          { status: 404 }\n        );\n      }\n\n      const event = await EventService.updateEvent(id, data);\n\n      return NextResponse.json({\n        success: true,\n        data: event\n      });\n    } catch (error) {\n      console.error('Error updating event:', error);\n      return NextResponse.json(\n        {\n          success: false,\n          error: 'Failed to update event'\n        },\n        { status: 500 }\n      );\n    }\n  }\n\n  static async deleteEvent(\n    request: NextRequest,\n    { params }: { params: Promise<{ id: string }> }\n  ): Promise<NextResponse> {\n    try {\n      const session = await getServerSession(authOptions);\n      if (!session?.user || session.user.role !== UserRole.ORGANIZER) {\n        return NextResponse.json(\n          { success: false, error: 'Unauthorized' }, \n          { status: 401 }\n        );\n      }\n\n      const { id } = await params;\n\n      // Verify the event belongs to the organizer\n      const existingEvent = await EventService.getEventById(id);\n      if (!existingEvent || existingEvent.organizerId !== session.user.id) {\n        return NextResponse.json(\n          { success: false, error: 'Event not found or access denied' },\n          { status: 404 }\n        );\n      }\n\n      await EventService.deleteEvent(id);\n\n      return NextResponse.json({\n        success: true,\n        message: 'Event deleted successfully'\n      });\n    } catch (error) {\n      console.error('Error deleting event:', error);\n      return NextResponse.json(\n        {\n          success: false,\n          error: 'Failed to delete event'\n        },\n        { status: 500 }\n      );\n    }\n  }\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 788, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 794, "column": 0}, "map": {"version":3,"sources":["file:///Users/muhammadghally/Documents/eventhub-beta/eventhub-beta/app/api/events/route.ts"],"sourcesContent":["import { EventController } from '@/src/controllers/eventController';\n\nexport const GET = EventController.getAllEvents;\nexport const POST = EventController.createEvent;\n"],"names":[],"mappings":";;;;AAAA;;AAEO,MAAM,MAAM,uIAAA,CAAA,kBAAe,CAAC,YAAY;AACxC,MAAM,OAAO,uIAAA,CAAA,kBAAe,CAAC,WAAW"}},
    {"offset": {"line": 802, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}