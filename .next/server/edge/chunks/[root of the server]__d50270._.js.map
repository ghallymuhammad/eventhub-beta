{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/middleware.ts"],"sourcesContent":["import { withAuth } from \"next-auth/middleware\"\nimport { NextResponse } from \"next/server\"\nimport type { NextRequest } from \"next/server\"\n\nexport default withAuth(\n  function middleware(request: NextRequest) {\n    const { pathname } = request.nextUrl\n    const token = request.nextauth.token\n\n    // Public routes that don't need authentication\n    const publicRoutes = [\n      '/',\n      '/signin',\n      '/signup',\n      '/reset-password',\n      '/search',\n      '/api/events'\n    ]\n\n    // Check if the route is public or matches event detail pattern\n    const isPublicRoute = publicRoutes.some(route => pathname.startsWith(route)) ||\n                         pathname.match(/^\\/event\\/[^/]+$/) // Allow /event/[id] for all users\n\n    // If it's a public route, allow access\n    if (isPublicRoute) {\n      return NextResponse.next()\n    }\n\n    // If not authenticated and trying to access protected route\n    if (!token) {\n      const signInUrl = new URL('/signin', request.url)\n      signInUrl.searchParams.set('callbackUrl', pathname)\n      return NextResponse.redirect(signInUrl)\n    }\n\n    // Role-based access control\n    const userRole = token.role as string\n\n    // Organizer-only routes\n    const organizerRoutes = [\n      '/organizer',\n      '/create-event',\n      '/create-event-new'\n    ]\n\n    if (organizerRoutes.some(route => pathname.startsWith(route)) && userRole !== 'ORGANIZER') {\n      return NextResponse.redirect(new URL('/unauthorized', request.url))\n    }\n\n    // Customer routes (checkout, transactions, etc.)\n    const customerRoutes = [\n      '/checkout',\n      '/transactions',\n      '/profile'\n    ]\n\n    if (customerRoutes.some(route => pathname.startsWith(route)) && !['CUSTOMER', 'ORGANIZER'].includes(userRole)) {\n      return NextResponse.redirect(new URL('/unauthorized', request.url))\n    }\n\n    return NextResponse.next()\n  },\n  {\n    callbacks: {\n      authorized: ({ token }) => !!token,\n    },\n  }\n)\n\nexport const config = {\n  matcher: [\n    /*\n     * Match all request paths except for the ones starting with:\n     * - api (API routes)\n     * - _next/static (static files)\n     * - _next/image (image optimization files)\n     * - favicon.ico (favicon file)\n     */\n    '/((?!api|_next/static|_next/image|favicon.ico|images).*)',\n  ],\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;AAAA;;;uCAGe,CAAA,GAAA,+VAAA,CAAA,WAAQ,AAAD,EACpB,SAAS,WAAW,OAAoB;IACtC,MAAM,EAAE,QAAQ,EAAE,GAAG,QAAQ,OAAO;IACpC,MAAM,QAAQ,QAAQ,QAAQ,CAAC,KAAK;IAEpC,+CAA+C;IAC/C,MAAM,eAAe;QACnB;QACA;QACA;QACA;QACA;QACA;KACD;IAED,+DAA+D;IAC/D,MAAM,gBAAgB,aAAa,IAAI,CAAC,CAAA,QAAS,SAAS,UAAU,CAAC,WAChD,SAAS,KAAK,CAAC,oBAAoB,kCAAkC;;IAE1F,uCAAuC;IACvC,IAAI,eAAe;QACjB,OAAO,sVAAA,CAAA,eAAY,CAAC,IAAI;IAC1B;IAEA,4DAA4D;IAC5D,IAAI,CAAC,OAAO;QACV,MAAM,YAAY,IAAI,IAAI,WAAW,QAAQ,GAAG;QAChD,UAAU,YAAY,CAAC,GAAG,CAAC,eAAe;QAC1C,OAAO,sVAAA,CAAA,eAAY,CAAC,QAAQ,CAAC;IAC/B;IAEA,4BAA4B;IAC5B,MAAM,WAAW,MAAM,IAAI;IAE3B,wBAAwB;IACxB,MAAM,kBAAkB;QACtB;QACA;QACA;KACD;IAED,IAAI,gBAAgB,IAAI,CAAC,CAAA,QAAS,SAAS,UAAU,CAAC,WAAW,aAAa,aAAa;QACzF,OAAO,sVAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,iBAAiB,QAAQ,GAAG;IACnE;IAEA,iDAAiD;IACjD,MAAM,iBAAiB;QACrB;QACA;QACA;KACD;IAED,IAAI,eAAe,IAAI,CAAC,CAAA,QAAS,SAAS,UAAU,CAAC,WAAW,CAAC;QAAC;QAAY;KAAY,CAAC,QAAQ,CAAC,WAAW;QAC7G,OAAO,sVAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,iBAAiB,QAAQ,GAAG;IACnE;IAEA,OAAO,sVAAA,CAAA,eAAY,CAAC,IAAI;AAC1B,GACA;IACE,WAAW;QACT,YAAY,CAAC,EAAE,KAAK,EAAE,GAAK,CAAC,CAAC;IAC/B;AACF;AAGK,MAAM,SAAS;IACpB,SAAS;QACP;;;;;;KAMC,GACD;KACD;AACH"}},
    {"offset": {"line": 97, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}